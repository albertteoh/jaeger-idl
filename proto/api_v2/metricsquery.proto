// Copyright (c) 2021 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package jaeger.api_v2;

import "model.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "opentelemetry/proto/metrics/v1/metrics.proto";

option go_package = "api_v2";
option java_package = "io.jaegertracing.api_v2";

// MetricsQueryBaseRequest is the base request parameter accompanying a MetricsQueryService RPC call.
message MetricsQueryBaseRequest {
  // end_time is the ending time of the time series query range.
  // Optional. Default = now.
  google.protobuf.Timestamp end_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = true
  ];

  // lookback is the duration from the end_time to look back on for metrics data points.
  // For example, if set to 1h, the query would span from end_time-1h to end_time.
  // Optional. Default = 1h.
  google.protobuf.Duration lookback = 2 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = true
  ];

  // step size is the duration between data points of the query results.
  // For example, if set to 5s, the results would produce a data point every 5 seconds
  // from the start_time to end_time.
  // Optional. Default = 5s.
  google.protobuf.Duration step = 3 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = true
  ];

  // rate is the duration in which the per-second rate of change is calculated for a cumulative counter metric.
  // Optional. Default = 10m.
  google.protobuf.Duration rate = 4 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = true
  ];
}

// GetMetricsResponse is the MetricsQueryService response returned by RPC calls.
message GetMetricsResponse {
  // metrics is the collection of metrics returned in a response.
  repeated opentelemetry.proto.metrics.v1.Metric metrics = 1 [
    (gogoproto.nullable) = false
  ];
}

// GetServiceMetricsRequest contains parameters for the GetServiceMetrics RPC call.
message GetServiceMetricsRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  // quantile is the quantile to compute from latency histogram metrics.
  // Required.
  double quantile = 2;
}

// GetServiceLatenciesRequest contains parameters for the GetServiceLatencies RPC call.
message GetServiceLatenciesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  // quantile is the quantile to compute from latency histogram metrics.
  // Required.
  double quantile = 2;
}

// GetServiceCallRatesRequest contains parameters for the GetServiceCallRates RPC call.
message GetServiceCallRatesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
}

// GetServiceErrorRatesRequest contains parameters for the GetServiceErrorRates RPC call.
message GetServiceErrorRatesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
}

// GetOperationMetricsRequest contains parameters for the GetOperationMetrics RPC call.
message GetOperationMetricsRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  // service_name is the service name to fetch operation metrics from.
  // Required.
  string service_name = 2;
  // quantile is the quantile to compute from latency histogram metrics.
  // Required.
  double quantile = 3;
}

// GetOperationLatenciesRequest contains parameters for the GetOperationLatencies RPC call.
message GetOperationLatenciesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  // service_name is the service name to fetch operation metrics from.
  // Required.
  string service_name = 2;
  // quantile is the quantile to compute from latency histogram metrics.
  // Required.
  double quantile = 3;
}

// GetOperationCallRatesRequest contains parameters for the GetOperationCallRates RPC call.
message GetOperationCallRatesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  // service_name is the service name to fetch operation metrics from.
  // Required.
  string service_name = 2;
}

// GetOperationErrorRatesRequest contains parameters for the GetOperationErrorRates RPC call.
message GetOperationErrorRatesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  // service_name is the service name to fetch operation metrics from.
  // Required.
  string service_name = 2;
}

service MetricsQueryService {
  // GetServiceMetrics is a convenience method that fetches the per-service latencies, call and error rate metrics.
  rpc GetServiceMetrics(GetServiceMetricsRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics"
    };
  }

  // GetServiceLatencies gets the per-service latencies.
  rpc GetServiceLatencies(GetServiceLatenciesRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics/latencies"
    };
  }

  // GetServiceCallRates gets the per-service call rates.
  rpc GetServiceCallRates(GetServiceCallRatesRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics/calls"
    };
  }

  // GetServiceErrorRates gets the per-service error rates.
  rpc GetServiceErrorRates(GetServiceErrorRatesRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics/errors"
    };
  }

  // GetOperationMetrics is a convenience method that fetches the per-operation latencies, call and error rate metrics for a given service.
  rpc GetOperationMetrics(GetOperationMetricsRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics/{service_name}"
    };
  }

  // GetOperationLatencies gets the per-operation latencies for a given service.
  rpc GetOperationLatencies(GetOperationLatenciesRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics/latencies/{service_name}"
    };
  }

  // GetOperationCallRates gets the per-operation call rates for a given service.
  rpc GetOperationCallRates(GetOperationCallRatesRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics/calls/{service_name}"
    };
  }

  // GetOperationErrorRates gets the per-operation error rates for a given service.
  rpc GetOperationErrorRates(GetOperationErrorRatesRequest) returns (GetMetricsResponse) {
    option (google.api.http) = {
      get: "/metrics/errors/{service_name}"
    };
  }
}

// Copyright (c) 2021 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package jaeger.api_v2;

import "model.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "opentelemetry/proto/metrics/v1/metrics.proto";

option go_package = "api_v2";
option java_package = "io.jaegertracing.api_v2";

// BaseRequest is the base request parameter accompanying a MetricsQueryService RPC call.
message MetricsQueryBaseRequest {
  // AggregatedMetricType is the metric type to query on.
  // Required.
//  AggregatedMetricType metric_type = 1;

  // labels are the labels or dimensions to search for within a metric.
  // For example, the following labels `{service_name: "currencyservice", operation: "/GetExchangeRate"}` will
  // form the full PromQL query:
  //     `metric_name{service_name="currencyservice",operation="/GetExchangeRate"`
  // Optional.
//  map<string, string> labels = 2;

  // end_time is the ending time of the time series query range.
  // Required.
  google.protobuf.Timestamp end_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];

  // lookback is the duration from the end_time to look back on for metrics data points.
  // For example, if set to 1h, the query would span from end_time-1h to end_time.
  // Optional.
  google.protobuf.Duration lookback = 2 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];

  // step size is the duration between data points of the query results.
  // For example, if set to 5s, the results would produce a data point every 5 seconds
  // from the start_time to end_time.
  // Optional.
  google.protobuf.Duration step = 3 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];

  // rate is the duration in which the per second rate of change is calculated for a cumulative counter metric.
  // Defaults to 10m.
  // Optional.
  google.protobuf.Duration rate = 4 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = true
  ];
}

// MetricsQueryBaseResponse is the base MetricsQueryResponse returned from RPC calls.
message MetricsQueryBaseResponse {
  // metrics is the collection of metrics returned in a response.
  repeated opentelemetry.proto.metrics.v1.Metric metrics = 1 [
    (gogoproto.nullable) = false
  ];
}

message GetServiceLatenciesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  double quantile = 2;
}

message GetServiceCallRateRequest {
  MetricsQueryBaseRequest baseRequest = 1;
}

message GetServiceErrorRateRequest {
  MetricsQueryBaseRequest baseRequest = 1;
}

message GetOperationLatenciesRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  string service_name = 2;
  double quantile = 3;
}

message GetOperationCallRateRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  string service_name = 2;
}

message GetOperationErrorRateRequest {
  MetricsQueryBaseRequest baseRequest = 1;
  string service_name = 2;
}

service MetricsQueryService {
  rpc GetServiceLatencies(GetServiceLatenciesRequest) returns (MetricsQueryBaseResponse) {
    option (google.api.http) = {
      get: "/metrics/latency"
    };
  }

  rpc GetServiceCallRate(GetServiceCallRateRequest) returns (MetricsQueryBaseResponse) {
    option (google.api.http) = {
      get: "/metrics/calls"
    };
  }

  rpc GetServiceErrorRate(GetServiceErrorRateRequest) returns (MetricsQueryBaseResponse) {
    option (google.api.http) = {
      get: "/metrics/errors"
    };
  }

  rpc GetOperationLatencies(GetOperationLatenciesRequest) returns (MetricsQueryBaseResponse) {
    option (google.api.http) = {
      get: "/metrics/latency/{service_name}"
    };
  }

  rpc GetOperationCallRate(GetOperationCallRateRequest) returns (MetricsQueryBaseResponse) {
    option (google.api.http) = {
      get: "/metrics/calls/{service_name}"
    };
  }

  rpc GetOperationErrorRate(GetOperationErrorRateRequest) returns (MetricsQueryBaseResponse) {
    option (google.api.http) = {
      get: "/metrics/errors/{service_name}"
    };
  }
}
